package org.example.oop;

/**
 * Класс описывает структуру нашего объекта
 * Класс состоит из:
 * 1) поля/свойства
 * 2) конструкторы
 * 3) методы
 *
 * ООП - это объектно-ориентированное программирование, в основе которой лежат понятия класс и объект
 * ООП реализует 4 основных принципа:
 * 1) инкапсуляция - сокрытие внутренней структуры объекта от внешних воздействий с помощью обращения к нему только через
 * методы самого объекта
 * 2) наследование - принцип ООП, согласно которому объект производного класса (т.е. класса наследника) может наследовать
 * поведение (т.е. методы) и состояния (т.е. свойства) базового класса (класса родителя). Это позволяет программисту создавать
 * похожие объекты без повторного переопределения характеристик.
 * 3) полиморфизм
 * 4) абстракция
 */
public class Human {
    /**
     * Модификаторы доступа - это специальные ключевые слова в java, которые контролируют область видимости чего-либо
     * (класс, поле, конструктор, метод и т д)
     *
     * Существует 4 модификатора доступа:
     * 1) public - виден всегда и везде
     * 2) private - виден только внутри класса
     * 3) default (package-private) - виден в пределах пакета, если модификатор доступа явно не указан, то он будет default
     * 4) protected - виден в пределах пакета + вне пакета в классах наследниках
     */
    private String name;
    private int age;
    private double height;
    private double weight;
    private int balance = 1000;

    /**
     * Конструктор - это некий блок кода, который вызывается только один раз при создания объекта класса
     * Конструктор всегда называется по имени класса
     * Конструкторов может быть сколько угодно много - это называется перегрузкой конструктора
     * Конструктор не имеет возвращаемого значения (в отличие от методов)
     *
     * Если мы не указываем конструктор явно, то у нас все равно будет конструктор по умолчанию
     * Если мы указываем какие-то свои новые конструкторы, то конструктор по умолчанию пропадает
     * и если мы хотим использовать его, то тогда необходимо указать его явно
     */
    public Human(){
        System.out.println("hello from constructor");
    }

    /**
     * this - это ключевое слово, которое хранит в себе ссылка на объект, на котором вызывается конструктор
     * this.name === dasha.name
     */
    public Human(String name, int age, double height, double weight){
        this.name = name;
        this.age = age;
        this.height = height;
        this.weight = weight;
    }

    public Human(String name) {
        this.name = name;
    }

    public int getBalance() {
        return balance;
    }

    public void setBalance(int balance) {
        if(name == "Artur"){
            this.balance = balance;
        } else {
            System.out.println("Нет прав на снятие денег");
        }
    }

    public String getName(){
        return name;
    }

    public void setName(String name){
        this.name = name;
    }

    /**
     * Метод - это некоторое поведение объекта
     * Метод состоит из:
     * 1) модификатор доступа
     * 2) тип возвращаемого значение, если метод ничего не возвращает, то ставим void
     * 3) название метода
     * 4) входные параметры в формате <тип данных1> + <название переменной1>, .., <тип данныхN> + <название переменнойN>
     * 5) тело метода (указывается в фигурных скобках)
     * 6) ключевое слово return, если тип возвращаемого значение не void
     *
     * Если у нас несколько методов с одним названием, но разной сигнатурой, то это называется перегрузкой метода
     */
    public String sayHello(String name){
        return "Hello from " + name;
    }

    public void sayHello(){
        System.out.println("Hello from method");
    }
}